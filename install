#!/bin/bash

#-----------
# Configurations
#-----------

POSTGRES_LAUNCHER_DIR=${POSTGRES_LAUNCHER_DIR-/var/local/postgres}
POSTGRES_LOG_DIR=${POSTGRES_LOG_FILE-/var/log/postgres}
POSTGRES_DATA_DIR=${POSTGRES_DATA_DIR-$POSTGRES_LAUNCHER_DIR/data}
POSTGRES_SENSITIVE_DIR=${POSTGRES_SENSITIVE_DIR-$POSTGRES_LAUNCHER_DIR/sensitive}
POSTGRES_PORT=${POSTGRES_PORT-5432}
POSTGRES_ADMIN_USERNAME=${POSTGRES_ADMIN_USERNAME-postgres}
POSTGRES_ADMIN_PASSWORD=${POSTGRES_ADMIN_PASSWORD-yth3fn0t}
DEBUG=${DEBUG-false}

#-----------
# Install Script
#-----------

echo "Installing POSTGRES..."

if [[ "`which psql 2> /dev/null`" == "" ]]; then
  echo "  -- Installing psql"
  if [[ "$OS" == "redhat" ]]; then
    yum install -y postgresql
  else
    apt-get install -y postgresql-client
  fi
fi

echo "  -- Copying config files"
mkdir -p ${POSTGRES_LAUNCHER_DIR}/config ${POSTGRES_LOG_DIR} ${POSTGRES_DATA_DIR} ${POSTGRES_SENSITIVE_DIR}
cp ./submodules/postgres/files/postgres.dockerfile ${POSTGRES_LAUNCHER_DIR}/Dockerfile
cp -u ./submodules/postgres/files/psqlentry ${POSTGRES_LAUNCHER_DIR}/config/psqlentry

DEBUG=$DEBUG LAUNCHER_DIR=$POSTGRES_LAUNCHER_DIR NAME=postgres ./submodules/docker/build

echo "  -- Creating helper scripts"
echo "#!/bin/bash
docker run -i -t \\
  -v ${POSTGRES_LOG_DIR}:/log \\
  -v ${POSTGRES_DATA_DIR}:/var/lib/postgresql/data \\
  --link postgres:psqldb \\
  postgres /bin/bash
" > ${POSTGRES_LAUNCHER_DIR}/debug

printf "%b" "#!/bin/bash
CONTAINER_ID=\`cat ${POSTGRES_LAUNCHER_DIR}/container.pid 2> /dev/null\`
if [[ \"\$CONTAINER_ID\" == \"\" ]]; then
  echo \"Starting POSTGRES ($POSTGRES_PORT, $POSTGRES_DATA_DIR)...\"

  echo \"  -- Removing any stopped postgres containers\"
  docker rm postgres >> /dev/null
  echo \"  -- Starting docker\"
  docker run -d -t \\
    -p ${POSTGRES_PORT}:5432 \\
    -v ${POSTGRES_LOG_DIR}:/log \\
    -v ${POSTGRES_DATA_DIR}:/var/lib/postgresql/data \\
    --name postgres \\
    postgres 2> /dev/null > ${POSTGRES_LAUNCHER_DIR}/container.pid

  IP=\$(${POSTGRES_LAUNCHER_DIR}/ip)

  if [[ \"\$IP\" == '' ]]; then
    echo '  -- No IP address assigned when starting POSTGRES, not sure what went wrong.'
    exit 1
  fi

  if [[ \"\`cat /etc/hosts | grep postgres.local\`\" == '' ]]; then
    echo \"  -- Adding postgres.local (\$IP) to /etc/hosts\"
    echo \"\$IP postgres.local\" >> /etc/hosts
  else
    echo \"  -- Updating postgres.local (\$IP) in /etc/hosts\"
    sed -i \"s|.*postgres.local|\$IP postgres.local|g\" /etc/hosts
  fi

  echo \"DONE, Starting POSTGRES $IP\"
else
  echo \"Container postgres already running, ${POSTGRES_LAUNCHER_DIR}/restart to restart it\"
fi
" > ${POSTGRES_LAUNCHER_DIR}/start


printf "%b" "#!/bin/bash
USER=\${USER-$POSTGRES_ADMIN_USERNAME}
PASSWORD=\${PASSWORD-$POSTGRES_ADMIN_PASSWORD}
DATABASE=\${DATABASE}
PGPASSFILE=${POSTGRES_SENSITIVE_DIR}/\${DATABASE}.pgpass

mkdir -p ${POSTGRES_SENSITIVE_DIR}
echo \"\" > \$PGPASSFILE
echo \"#hostname:port:database:username:password\" >> \$PGPASSFILE
echo \"*:*:\$DATABASE:\$USER:\$PASSWORD\" >> \$PGPASSFILE
chmod 600 \$PGPASSFILE
" > ${POSTGRES_LAUNCHER_DIR}/pgpass

printf "%b" "#!/bin/bash
DATABASE=\${1-mydb}
USER=\${2-$POSTGRES_ADMIN_USERNAME}
PASSWORD=\${3-$POSTGRES_ADMIN_PASSWORD}
TEMPLATE=\${4-DEFAULT}
DROP=\${DROP-false}
DEBUG=\${DEBUG-false}
PGPASSFILE=${POSTGRES_SENSITIVE_DIR}/\${DATABASE}.pgpass
DBFILE=${POSTGRES_LAUNCHER_DIR}/db/\$DATABASE

# USE a pgpassfile when passwords are set, e.g. PGPASSFILE=/cenx/sensitive/postgres.pgpass

if [[ \"\$DEBUG\" == true ]]; then
  if [[ \"\$DROP\" == true ]]; then
    PGUSER=$POSTGRES_ADMIN_USERNAME PGHOST=postgres.local PGPORT=$POSTGRES_PORT psql -c \"DROP DATABASE \$DATABASE;\"
    PGUSER=$POSTGRES_ADMIN_USERNAME PGHOST=postgres.local PGPORT=$POSTGRES_PORT psql -c \"DROP USER \$USER;\"
  fi
  PGUSER=$POSTGRES_ADMIN_USERNAME PGHOST=postgres.local PGPORT=$POSTGRES_PORT psql -c \"CREATE USER \$USER WITH SUPERUSER;\"
  PGUSER=$POSTGRES_ADMIN_USERNAME PGHOST=postgres.local PGPORT=$POSTGRES_PORT psql -c \"ALTER USER \$USER WITH PASSWORD '\$PASSWORD';\"
  PGUSER=$POSTGRES_ADMIN_USERNAME PGHOST=postgres.local PGPORT=$POSTGRES_PORT psql -c \"CREATE DATABASE \$DATABASE OWNER \$USER TEMPLATE \$TEMPLATE;\"
else
  if [[ \"\$DROP\" == true ]]; then
    PGUSER=$POSTGRES_ADMIN_USERNAME PGHOST=postgres.local PGPORT=$POSTGRES_PORT psql -c \"DROP DATABASE \$DATABASE;\" 2>1 >> /dev/null
    PGUSER=$POSTGRES_ADMIN_USERNAME PGHOST=postgres.local PGPORT=$POSTGRES_PORT psql -c \"DROP USER \$USER;\" 2>1 >> /dev/null
  fi
  PGUSER=$POSTGRES_ADMIN_USERNAME PGHOST=postgres.local PGPORT=$POSTGRES_PORT psql -c \"CREATE USER \$USER WITH SUPERUSER;\" 2>1 >> /dev/null
  PGUSER=$POSTGRES_ADMIN_USERNAME PGHOST=postgres.local PGPORT=$POSTGRES_PORT psql -c \"ALTER USER \$USER WITH PASSWORD '\$PASSWORD';\" 2>1 >> /dev/null
  PGUSER=$POSTGRES_ADMIN_USERNAME PGHOST=postgres.local PGPORT=$POSTGRES_PORT psql -c \"CREATE DATABASE \$DATABASE OWNER \$USER TEMPLATE \$TEMPLATE;\" 2>1 >> /dev/null
fi

DATABASE=\$DATABASE USER=\$USER PASSWORD=\$PASSWORD ${POSTGRES_LAUNCHER_DIR}/pgpass
mkdir -p ${POSTGRES_LAUNCHER_DIR}/db

echo \"PGUSER=\$USER PGHOST=postgres.local PGDATABASE=\$DATABASE PGPASSFILE=\$PGPASSFILE psql \\\$@\" > \$DBFILE
chmod 755 \$DBFILE
" > ${POSTGRES_LAUNCHER_DIR}/newdb

NAME=postgres HOST=postgres.local DIR=$POSTGRES_LAUNCHER_DIR ./submodules/docker/stop
NAME=postgres DIR=$POSTGRES_LAUNCHER_DIR ./submodules/docker/restart
NAME=postgres DIR=$POSTGRES_LAUNCHER_DIR ./submodules/docker/idempot
NAME=postgres DIR=$POSTGRES_LAUNCHER_DIR ./submodules/docker/ip

chmod 755 $POSTGRES_LAUNCHER_DIR/start
chmod 755 $POSTGRES_LAUNCHER_DIR/debug
chmod 755 $POSTGRES_LAUNCHER_DIR/newdb
chmod 755 $POSTGRES_LAUNCHER_DIR/pgpass

echo "Done, Installing POSTGRES."