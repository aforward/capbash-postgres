#!/bin/bash
source ./bits/bootstrap/logging
set -euo pipefail ; IFS=$'\n\t'

#-----------
# Configurations
#-----------

LAUNCHER_OWNER=${LAUNCHER_OWNER-$USER}
export LAUNCHER_DIR=${LAUNCHER_DIR-/var/local}
export POSTGRES_LAUNCHER_DIR=${POSTGRES_LAUNCHER_DIR-$LAUNCHER_DIR/postgres}

export LOG_DIR=${LOG_DIR-/var/log}
export POSTGRES_LOG_DIR=${POSTGRES_LOG_DIR-$LOG_DIR/postgres}
export POSTGRES_DATA_DIR=${POSTGRES_DATA_DIR-/var/local/data/postgres}
export POSTGRES_SENSITIVE_DIR=${POSTGRES_SENSITIVE_DIR-/var/local/sensitive/postgres}
POSTGRES_PORT=${POSTGRES_PORT-5432}
POSTGRES_ADMIN_USERNAME=${POSTGRES_ADMIN_USERNAME-postgres}
POSTGRES_ADMIN_PASSWORD=${POSTGRES_ADMIN_PASSWORD-yth3fn0t}

POSTGRES_CONF=${POSTGRES_CONF-./bits/postgres/files/postgresql.conf}
POSTGRES_MAX_CONNECTIONS=${POSTGRES_MAX_CONNECTIONS-100}
POSTGRES_SHARED_BUFFERS=${POSTGRES_SHARED_BUFFERS-256MB}
POSTGRES_MAX_FILES_PER_PROCESS=${POSTGRES_MAX_FILES_PER_PROCESS-1000}

#-----------
# Install Script
#-----------

notify "Installing POSTGRES..."
PSQL_OUTPUT=/tmp/unzip.log

if [[ "`which psql 2> /dev/null`" == "" ]] || [[ "`psql --version | grep 9.4`" == "" ]]; then

  if [[ "$OS" == "redhat" ]] || [[ "$OS" == "centos" ]]; then
    notify "  -- Installing PSQL client on RHEL/CENTOS"
    mkdir -p /var/tmp
    yum install -y http://yum.postgresql.org/9.3/redhat/rhel-6-x86_64/pgdg-redhat93-9.3-1.noarch.rpm
    yum install -y postgresql93-server postgresql93-contrib
    cp -f /usr/pgsql-9.3/bin/* /usr/local/bin/
  elif [[ "$OS" == "ubuntu" ]]; then
    notify "  -- Installing PSQL client on Ubuntu"
    $SUDO apt-get install -y postgresql-client > $PSQL_OUTPUT 2>&1
    ERROR="Unable to install postgresql-client due to ..." ./bits/bootstrap/failonerrors $? $PSQL_OUTPUT
    [ $? -ne 0 ] && exit 1
  else
    debug "  -- Skipping PSQL client for Mac"
  fi
else
  debug "  -- Psql client already installed on host"
fi

notify "  -- Copying config files"

OWNER=$LAUNCHER_OWNER ./bits/bootstrap/mkdir \
  LAUNCHER_DIR \
  POSTGRES_LAUNCHER_DIR \
  POSTGRES_LOG_DIR \
  POSTGRES_DATA_DIR \
  POSTGRES_SENSITIVE_DIR \
  $POSTGRES_LAUNCHER_DIR/db \
  $POSTGRES_LAUNCHER_DIR/config

chmod -R 700 $POSTGRES_DATA_DIR

cp ./bits/postgres/files/postgres.dockerfile ${POSTGRES_LAUNCHER_DIR}/Dockerfile
TEMPLATE=./bits/postgres/files/psqlentry LOCATION=${POSTGRES_LAUNCHER_DIR}/config/psqlentry ./bits/docker/copyif
LAUNCHER_DIR=$POSTGRES_LAUNCHER_DIR NAME=postgres ./bits/docker/build

NAME=postgres DIR=$POSTGRES_LAUNCHER_DIR \
  DEBUG=./bits/postgres/files/_debug \
  ./bits/docker/helpers

echo "#!/bin/bash
# Don't run under -i as this script is called remotely via capistrano
# And it gets locked if you do
docker run -t \\
  -v ${POSTGRES_LOG_DIR}:/log \\
  -v ${POSTGRES_DATA_DIR}:/var/lib/postgresql/data \\
  postgres init
exit 0
" > ${POSTGRES_LAUNCHER_DIR}/init

printf "%b" "#!/bin/bash
source logging
CONTAINER_ID=\`${POSTGRES_LAUNCHER_DIR}/running\`
if [[ \"\$CONTAINER_ID\" == \"\" ]]; then
  notify \"Starting POSTGRES ($POSTGRES_PORT, $POSTGRES_DATA_DIR)...\"

  debug \"  -- Removing any stopped postgres containers\"
  docker rm postgres > /dev/null 2>&1
  debug \"  -- Starting docker\"
  docker run -d -t \\
    -p ${POSTGRES_PORT}:5432 \\
    -v ${POSTGRES_LOG_DIR}:/log \\
    -v ${POSTGRES_DATA_DIR}:/var/lib/postgresql/data \\
    --name postgres \\
    postgres 2> /dev/null > ${POSTGRES_LAUNCHER_DIR}/container.pid

  IP=\$(${POSTGRES_LAUNCHER_DIR}/ip)

  if [[ \"\$IP\" == '' ]]; then
    debug '  -- No IP address assigned when starting POSTGRES, not sure what went wrong.'
    exit 1
  fi

  if [[ \"\`cat /etc/hosts | grep postgres.local\`\" == '' ]]; then
    debug \"  -- Adding postgres.local (\$IP) to /etc/hosts\"
    echo \"\$IP postgres.local\" >> /etc/hosts
  else
    debug \"  -- Updating postgres.local (\$IP) in /etc/hosts\"
    sed -i \"s|.*postgres.local|\$IP postgres.local|g\" /etc/hosts
  fi

  notify \"DONE, Starting POSTGRES \$IP\"
else
  debug \"Container postgres already running, ${POSTGRES_LAUNCHER_DIR}/restart to restart it\"
fi
" > ${POSTGRES_LAUNCHER_DIR}/start


printf "%b" "#!/bin/bash
USER=\${USER-$POSTGRES_ADMIN_USERNAME}
PASSWORD=\${PASSWORD-$POSTGRES_ADMIN_PASSWORD}
DATABASE=\${DATABASE}
PGPASSFILE=${POSTGRES_SENSITIVE_DIR}/\${DATABASE}.pgpass

mkdir -p ${POSTGRES_SENSITIVE_DIR}
echo \"\" > \$PGPASSFILE
echo \"#hostname:port:database:username:password\" >> \$PGPASSFILE
echo \"*:*:\$DATABASE:\$USER:\$PASSWORD\" >> \$PGPASSFILE
chmod 600 \$PGPASSFILE
" > ${POSTGRES_LAUNCHER_DIR}/pgpass

printf "%b" "#!/bin/bash
DATABASE=\${1-mydb}
USER=\${2-$POSTGRES_ADMIN_USERNAME}
PASSWORD=\${3-$POSTGRES_ADMIN_PASSWORD}
TEMPLATE=\${4-DEFAULT}
DROP=\${DROP-false}
DEBUG=\${DEBUG-false}
PGPASSFILE=${POSTGRES_SENSITIVE_DIR}/\${DATABASE}.pgpass
DBFILE=${POSTGRES_LAUNCHER_DIR}/db/\$DATABASE
DUMPFILE=${POSTGRES_LAUNCHER_DIR}/db/dump_\$DATABASE
RESTOREFILE=${POSTGRES_LAUNCHER_DIR}/db/restore_\$DATABASE

# USE a pgpassfile when passwords are set, e.g. PGPASSFILE=/cenx/sensitive/postgres.pgpass

if [[ \"\$DEBUG\" == true ]] ; then
  exec 3>&1
else
  exec 3>&1 &>/dev/null
fi

if [[ \"\$DROP\" == true ]]; then
  PGUSER=$POSTGRES_ADMIN_USERNAME PGHOST=postgres.local PGPORT=$POSTGRES_PORT psql -c \"DROP DATABASE \$DATABASE;\"
  PGUSER=$POSTGRES_ADMIN_USERNAME PGHOST=postgres.local PGPORT=$POSTGRES_PORT psql -c \"DROP USER \$USER;\"
fi
PGUSER=$POSTGRES_ADMIN_USERNAME PGHOST=postgres.local PGPORT=$POSTGRES_PORT psql -c \"CREATE USER \$USER WITH SUPERUSER;\"
PGUSER=$POSTGRES_ADMIN_USERNAME PGHOST=postgres.local PGPORT=$POSTGRES_PORT psql -c \"ALTER USER \$USER WITH PASSWORD '\$PASSWORD';\"
PGUSER=$POSTGRES_ADMIN_USERNAME PGHOST=postgres.local PGPORT=$POSTGRES_PORT psql -c \"CREATE DATABASE \$DATABASE OWNER \$USER TEMPLATE \$TEMPLATE;\"

DATABASE=\$DATABASE USER=\$USER PASSWORD=\$PASSWORD ${POSTGRES_LAUNCHER_DIR}/pgpass
mkdir -p ${POSTGRES_LAUNCHER_DIR}/db

echo \"PGUSER=\$USER PGHOST=postgres.local PGDATABASE=\$DATABASE PGPASSFILE=\$PGPASSFILE psql \\\$@\" > \$DBFILE
echo \"PGDATABASE=\$DATABASE PGPASSFILE=\$PGPASSFILE pg_dump --host=postgres.local --dbname=\$DATABASE --username=\$USER --role=\$USER --no-password --format=c --file=\\\$@\" > \$DUMPFILE
echo \"PGHOST=postgres.local pg_restore --dbname=postgres --username=\$USER --role=\$USER --create --no-privileges --no-owner --jobs=10 \\\$@\" > \$RESTOREFILE

chmod 755 \$DBFILE \$DUMPFILE \$RESTOREFILE
" > ${POSTGRES_LAUNCHER_DIR}/newdb

printf "%b" "#!/bin/bash
DATABASE=\${1-mydb}
USER=\${2-$POSTGRES_ADMIN_USERNAME}
PASSWORD=\${3-$POSTGRES_ADMIN_PASSWORD}
TEMPLATE=\${4-DEFAULT}
DEBUG=\${DEBUG-false}
PGPASSFILE=${POSTGRES_SENSITIVE_DIR}/\${DATABASE}.pgpass
DBFILE=${POSTGRES_LAUNCHER_DIR}/db/\$DATABASE
DUMPFILE=${POSTGRES_LAUNCHER_DIR}/db/dump_\$DATABASE
RESTOREFILE=${POSTGRES_LAUNCHER_DIR}/db/restore_\$DATABASE

echo \"PGUSER=\$USER PGHOST=postgres.local PGDATABASE=\$DATABASE PGPASSFILE=\$PGPASSFILE psql \\\$@\" > \$DBFILE
echo \"PGDATABASE=\$DATABASE PGPASSFILE=\$PGPASSFILE pg_dump --host=postgres.local --dbname=\$DATABASE --username=\$USER --role=\$USER --no-password --format=c --file=\\\$@\" > \$DUMPFILE
echo \"PGHOST=postgres.local pg_restore --dbname=postgres --username=\$USER --role=\$USER --create --no-privileges --no-owner --jobs=10 \\\$@\" > \$RESTOREFILE

chmod 755 \$DBFILE \$DUMPFILE \$RESTOREFILE
" > ${POSTGRES_LAUNCHER_DIR}/accessdb

NAME=postgres HOST=postgres.local DIR=$POSTGRES_LAUNCHER_DIR ./bits/docker/helpers

chmod 755 $POSTGRES_LAUNCHER_DIR/init
chmod 755 $POSTGRES_LAUNCHER_DIR/start
chmod 755 $POSTGRES_LAUNCHER_DIR/newdb
chmod 755 $POSTGRES_LAUNCHER_DIR/accessdb
chmod 755 $POSTGRES_LAUNCHER_DIR/pgpass

notify "  -- Initializing DB ($POSTGRES_LAUNCHER_DIR/init)"
$POSTGRES_LAUNCHER_DIR/init
notify "  -- Setting up postgres conf"
TEMPLATE=${POSTGRES_CONF} \
  LOCATION=${POSTGRES_DATA_DIR}/postgresql.conf \
  ./bits/docker/copyif @POSTGRES_MAX_CONNECTIONS@ $POSTGRES_MAX_CONNECTIONS @POSTGRES_SHARED_BUFFERS@ $POSTGRES_SHARED_BUFFERS @POSTGRES_MAX_FILES_PER_PROCESS@ $POSTGRES_MAX_FILES_PER_PROCESS

notify "  -- Configuring helper access to postgres"
$POSTGRES_LAUNCHER_DIR/accessdb postgres $POSTGRES_ADMIN_USERNAME $POSTGRES_ADMIN_PASSWORD

notify "Done, Installing POSTGRES."
